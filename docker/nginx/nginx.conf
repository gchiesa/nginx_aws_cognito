# For more information on configuration, see:
#   * Official English Documentation: http://nginx.org/en/docs/
#   * Official Russian Documentation: http://nginx.org/ru/docs/

user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log;
pid /run/nginx.pid;

# Load dynamic modules. See /usr/share/nginx/README.dynamic.
include /usr/share/nginx/modules/*.conf;

events {
    worker_connections 1024;
}

http {
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile            on;
    tcp_nopush          on;
    tcp_nodelay         on;
    keepalive_timeout   65;
    types_hash_max_size 2048;

    include             /etc/nginx/mime.types;
    default_type        application/octet-stream;

    # Load modular configuration files from the /etc/nginx/conf.d directory.
    # See http://nginx.org/en/docs/ngx_core_module.html#include
    # for more information.
    include /etc/nginx/conf.d/*.conf;

#    server {
#        listen       80 default_server;
#        listen       [::]:80 default_server;
#        server_name  _;
#        root         /usr/share/nginx/html;
#
#        # Load configuration files for the default server block.
#        include /etc/nginx/default.d/*.conf;
#
#        location / {
#            auth_request /oauth2/verify;
#            auth_request_set $cognito_username $upstream_http_x_aws_cognito_username;
#            auth_request_set $cognito_accesstoken $upstream_http_x_aws_cognito_accesstoken;
#            auth_request_set $cognito_attributesjson $upstream_http_x_aws_cognito_attributesjson;
#            proxy_set_header X-AWS-Cognito-Username $cognito_username;
#            proxy_set_header X-AWS-Cognito-AccessToken $cognito_accesstoken;
#            proxy_set_header X-AWS-Cognito-AttributesJson $cognito_attributesjson;
#        }
#
#        error_page 404 /404.html;
#            location = /40x.html {
#        }
#
#        error_page 500 502 503 504 /50x.html;
#            location = /50x.html {
#        }
#
#        location = /oauth2/login {
#            proxy_pass http://127.0.0.1:9988;
#
#        }
#
#        location = /oauth2/refresh {
#            proxy_pass http://127.0.0.1:9988;
#        }
#
#        location = /oauth2/verify {
#            proxy_pass http://127.0.0.1:9988;
#            proxy_pass_request_body off;
#            proxy_set_header Content-Length "";
#            proxy_set_header X-Original-URI $request_uri;
#            proxy_set_header X-AWS-Cognito-BasicAuth $http_authorization;
#        }
#
#    }

 # Settings for a TLS enabled server.

    server {
        listen       443 ssl http2 default_server;
        listen       [::]:443 ssl http2 default_server;
        server_name  _;
        root         /usr/share/nginx/html;

        ssl_certificate "/etc/nginx/ssl/server.pem";
        ssl_certificate_key "/etc/nginx/ssl/server.key";
        ssl_session_cache shared:SSL:1m;
        ssl_session_timeout  10m;
        ssl_ciphers HIGH:!aNULL:!MD5;
        ssl_prefer_server_ciphers on;

        # Load configuration files for the default server block.
        include /etc/nginx/default.d/*.conf;

        location /api/ {
            auth_request /verify;
            auth_request_set $cognito_username $upstream_http_x_aws_cognito_username;
            auth_request_set $cognito_accesstoken $upstream_http_x_aws_cognito_accesstoken;
            auth_request_set $cognito_attributesjson $upstream_http_x_aws_cognito_attributesjson;

            proxy_pass http://httpbin.org/anything;
            proxy_set_header X-Original-URI $request_uri;
            proxy_set_header X-Cognito-Username $cognito_username;
            proxy_set_header X-Cognito-Attributes $cognito_attributesjson;
        }

        error_page 404 /404.html;
            location = /40x.html {
        }

        error_page 500 502 503 504 /50x.html;
            location = /50x.html {
        }

        location /oauth2/ {
            proxy_pass http://127.0.0.1:9988;

        }

        location = /verify {
            proxy_pass http://127.0.0.1:9988;
            proxy_pass_request_body off;
            proxy_set_header Content-Length "";
            proxy_set_header X-Original-URI $request_uri;
            proxy_set_header Authorization $http_authorization;
        }
    }

}
